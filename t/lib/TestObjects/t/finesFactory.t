#!/usr/bin/perl

# Copyright KohaSuomi 2016
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# Koha is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Koha; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use Modern::Perl;
use Test::More;

use Koha::Borrowers;
use t::lib::TestObjects::FinesFactory;
use C4::Members;

my $subtestContext = {};

#Check if the precondition Borrower exists, it shouldn't
my $borrower = Koha::Borrowers->find({cardnumber => '1A23' });
ok(not(defined($borrower)), "Fines borrower not defined");

#Create the Fine
my $finesfactory = t::lib::TestObjects::FinesFactory->createTestGroup([{
    amount => 10.0,
    cardnumber => '1A23',
    accounttype => 'FU',
    note => 'unique identifier',
},

    ], undef, $subtestContext);

#Check if the previously non-existent Borrower is now autogenerated?
$borrower = Koha::Borrowers->find({cardnumber => '1A23' });
ok($borrower && ref($borrower) eq 'Koha::Borrower', "Fines borrower autogenerated");

# check that the fine exists in accountlines
my ($total,$fines,undef) = C4::Members::GetMemberAccountRecords($borrower->borrowernumber);

my $found_testFine = 0;
foreach my $fine (@$fines){
    if ($fine->{note} eq 'unique identifier'){
        $found_testFine = 1;
        last;
    }
}

ok($found_testFine, 'Fine \'unique identifier\', accountlines match.');

# delete the fine
t::lib::TestObjects::ObjectFactory->tearDownTestContext($subtestContext);

# confirm the deletion
($total,$fines,undef) = C4::Members::GetMemberAccountRecords($borrower->borrowernumber);

$found_testFine = 0;
foreach my $fine (@$fines){
    if ($fine->{note} eq 'unique identifier'){
        $found_testFine = 1;
        last;
    }
}
is($found_testFine, 0, 'Fine \'unique identifier\', deleted.');

done_testing();

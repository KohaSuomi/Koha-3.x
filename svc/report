#!/usr/bin/perl

# This file is part of Koha.
#
# Copyright (C) 2011  Chris Cormack <chris@bigballofwax.co.nz>
# Copyright (C) 2013  Mark Tompsett
#
# Koha is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Koha is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Koha; if not, see <http://www.gnu.org/licenses>.

use Modern::Perl;

use C4::Auth;
use C4::Reports::Guided;
use JSON;
use CGI;

use Koha::Cache;


my $query  = CGI->new();
my $report_id = $query->param('id');
my $report_name = $query->param('name');
my $report_annotation = $query->param('annotated');

my $report_rec = get_saved_report( $report_name ? { 'name' => $report_name } : { 'id' => $report_id } );
if (!$report_rec) { die "There is no such report.\n"; }

my ( $template, $loggedinuser, $cookie ) = get_template_and_user(
    {
        template_name   => "intranet-main.tmpl",
        query           => $query,
        type            => "intranet",
        authnotrequired => 0,
        flagsrequired   => { catalogue => 1, },
    }
);

my $cache = Koha::Cache->get_instance();
my $cache_active = $cache->is_cache_active;
my ($cache_key, $json_text);
if ($cache_active) {
    $cache_key = "intranet:report:".($report_name ? "name:$report_name" : "id:$report_id");
    $json_text = $cache->get_from_cache($cache_key);
}

unless ($json_text) {
    my $offset = 0;
    my $limit  = C4::Context->preference("SvcMaxReportRows") || 10;
    my ( $sth, $errors ) = execute_query( $report_rec->{savedsql}, $offset, $limit );
    if ($sth) {
        my $lines;
        if ($report_annotation) {
            $lines = $sth->fetchall_arrayref({});
        }
        else {
            $lines = $sth->fetchall_arrayref;
        }
        $json_text = encode_json($lines);

        if ($cache_active) {
            $cache->set_in_cache( $cache_key, $json_text, $report_rec->{cache_expiry} );
        }
    }
    else {
        $json_text = encode_json($errors);
    }
}

print $query->header(
    -charset    => 'UTF-8',
    -type       => 'application/json'
);
print $json_text;

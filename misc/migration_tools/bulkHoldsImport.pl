#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
#use diagnostics;
BEGIN {
    # find Koha's Perl modules
    # test carefully before changing this
    use FindBin;
    eval { require "$FindBin::Bin/../kohalib.pl" };
}

use open qw( :std :encoding(UTF-8) );
binmode( STDOUT, ":encoding(UTF-8)" );

use ConversionTable::ItemnumberConversionTable;
use ConversionTable::BorrowernumberConversionTable;
use ConversionTable::BiblionumberConversionTable;

use C4::Members;
use C4::Branch;
use C4::Letters;
use C4::Context;

binmode( STDOUT, ":encoding(UTF-8)" );

my $legacy_ils = 'o'; #o == Origo, p == Pallas

my ( $input_file, $verbose) = ('',0,undef);
my $borrowernumberConversionTable = 'borrowernumberConversionTable';
my $biblionumberConversionTable = 'biblionumberConversionTable';
my $itemnumberConversionTable = 'itemnumberConversionTable';

$|=1;

GetOptions(
    'file:s'                               => \$input_file,
    'o|bornumConversionTable:s'            => \$borrowernumberConversionTable,
    'i|inConversionTable:s'                => \$itemnumberConversionTable,
    'b|bnConversionTable:s'                => \$biblionumberConversionTable,
    'verbose'                              => \$verbose,
);

my $help = <<HELP;

perl bulkHoldsImport.pl --file /home/koha/pielinen/holds.migrateme -n 1200 \
    --bnConversionTable borrowernumberConversionTable

Migrates the Perl-serialized MMT-processed holds-files to Koha.

  --file               The perl-serialized HASH of checkouts.

  -n                   How many checkouts to migrate? Defaults to all.

  --bnConversionTable  From which key-value -file to read the converted borrowernumber.
                       We are adding Patrons to a database with existing Patrons, so we need to convert
                       borrowernumbers so they won't overlap with existing ones.
                       borrowernumberConversionTable has the following format, where first column is the original
                       customer id and the second column is the mapped Koha borrowernumber:

                           1001003 12001003
                           1001004 12001004
                           1001006 12001005
                           1001007 12001006
                           ...

  --inConversionTable  From which file to read the conversion between itemnumber and Item's barcode.
                       File is generated by the bulkItemImport.pl and has the following content:

                           itemnumber:newItemnumber:barcode
                           10001000:1:541N00010001
                           10001001:2:541N00010013
                           10001074:3:541N00010746
                           ...

                       Defaults to 'itemnumberConversionTable'.

HELP

$|=1;

$borrowernumberConversionTable = ConversionTable::BorrowernumberConversionTable->new( $borrowernumberConversionTable, 'read' );
$itemnumberConversionTable     = ConversionTable::ItemnumberConversionTable->new(     $itemnumberConversionTable,     'read' );
$biblionumberConversionTable   = ConversionTable::BiblionumberConversionTable->new(   $biblionumberConversionTable ,  'read' );


my $dbh=C4::Context->dbh;
my $addHoldSql = qq/
        INSERT INTO reserves
            (borrowernumber,biblionumber,reservedate,branchcode,constrainttype,
            priority,reservenotes,itemnumber,found,waitingdate,expirationdate)
        VALUES
             (?,?,?,?,?,
             ?,?,?,?,?,?)
             /;
my $sth = $dbh->prepare($addHoldSql);
my $getPrioritySql = qq/
    SELECT priority, branchcode, found, reservedate
    FROM reserves
    WHERE biblionumber = ?
        AND found IS NULL
        AND reservedate <= ?
    ORDER BY reservedate DESC, priority DESC
    LIMIT 1
/;
my $sthGetPriority = $dbh->prepare($getPrioritySql);
sub getPriorityFromDb {
    my ($hold) = @_;

    $sthGetPriority->execute($hold->{biblionumber}, $hold->{reservedate});
    my $p = $sthGetPriority->fetchrow_hashref();
    return $p->{priority} ? $p->{priority}+1 : 1;
}

sub newFromRow {
    no strict 'vars';
    eval shift;
    my $s = $VAR1;
    use strict 'vars';
    warn $@ if $@;
    return $s;
}

sub sendNotification {
    my $borrowernumber = shift;
    my $branch = shift;
    my $biblionumber = shift;
    my $checkitem = shift;
    
    my $borrower = C4::Members::GetMember(borrowernumber => $borrowernumber);
    my $branch_details = C4::Branch::GetBranchDetail($borrower->{branchcode});
    if ( my $letter =  C4::Letters::GetPreparedLetter (
        module => 'reserves',
        letter_code => 'HOLD',
        branchcode => $branch,
        tables => {
            'branches'  => $branch_details,
            'borrowers' => $borrower,
            'biblio'    => $biblionumber,
            'items'     => $checkitem,
        },
    ) ) {

        my $admin_email_address =$branch_details->{'branchemail'} || C4::Context->preference('KohaAdminEmailAddress');

        C4::Letters::EnqueueLetter(
            {   letter                 => $letter,
                borrowernumber         => $borrowernumber,
                message_transport_type => 'email',
                from_address           => $admin_email_address,
                to_address           => $borrower->{email},
            }
        );
    }
}


sub getPriorities {
    my $fh = shift;
    my $prior = {};
    print "getting priorities";
    while (<$fh>) {
        if ($_ =~ /,'reservedate' => '(.*?)',/) {
            my $reservedate = $1;
            $reservedate =~ s/\D//g;
            if ($_ =~ /'biblionumber' => '(.*?)',/) {
                my $biblionumber = $biblionumberConversionTable->fetch($1);
                if ($_ =~ /'priority' => '(.*?)',/) {
                    my $priority = $1;
                    $prior->{ $biblionumber }->{ $reservedate } = $priority;
                }
            }
        }
    }
    calculatePriorities( $prior );
    return $prior;
}
sub calculatePriorities {
    my $prior = shift;
    #iterate biblios
    foreach my $k (keys %$prior) {
        my $bib = $prior->{$k};

        my $pri = 1;
        #iterate reservationdates setting a priority for each date
        if ($legacy_ils eq 'p') {
            foreach my $reservdate (sort keys %$bib) {
                if ($bib->{$reservdate} == 3) { #if priority is 3
                    $bib->{$reservdate} = $pri++;
                }
            }
        }
        elsif ($legacy_ils eq 'o') {
            foreach my $reservdate (sort keys %$bib) {
                $bib->{$reservdate} = $pri++;
            }
        }
    }
}
#Do we need an algorithm to even out the migrated reserves priorities amidst the existing reserves?
#my $sth_reservesCnt = $dbh->prepare("SELECT count(reserve_id) FROM reserves WHERE biblionumber = ?");
#sub _calcReservePriorityIncrement {
#    my ($bibnum, $migratedHoldsCount) = @_;
#    $sth_reservesCnt->execute($bibnum);
#    my $count = $sth_reservesCnt->fetchrow();
#    
#}
my $priorities;
if ($legacy_ils eq 'p') {
    my $fh = IO::File->new($input_file, "<:encoding(utf-8)");
    $priorities = getPriorities($fh);
    $fh->close();
}

my $fh = IO::File->new($input_file, "<:encoding(utf-8)");
my $i = 0;
while (<$fh>) {
    $i++;
    print ".";
    print "\n$i" unless $i % 100;


    my $hold = newFromRow($_);
    convertKeys($hold);

#if ($hold->{biblionumber} == 11297698) {
#    print "BREAKPOINT";
#}

    my $priority = "$hold->{priority}"; #0's as string 0
    if ($legacy_ils eq 'p' && $priority ne '0'  &&  $hold->{reservedate}) {
        my $reservedate = $hold->{reservedate};
        $priority = $priorities->{ $hold->{biblionumber} }->{ $reservedate };
    }
    if ($legacy_ils eq 'o' && not(exists($hold->{found}))) {
        $priority = getPriorityFromDb($hold);
    }


    $sth->execute(
        $hold->{borrowernumber}, $hold->{biblionumber}, $hold->{reservedate},          $hold->{branchcode},
        $hold->{constrainttype}, $priority,             $hold->{reservenotes},         $hold->{itemnumber},
        $hold->{found},          $hold->{waitingdate},	$hold->{expirationdate}
    );
    if ($sth->err()) {
        print 'For: borrowernumber:'.$hold->{borrowernumber}.' biblionumber:'.$hold->{biblionumber}.' itemnumber:'.$hold->{itemnumber};
    }
    if ($legacy_ils eq 'p') {
        if ((! $sth->err()) && $hold->{status} eq 'NOUDETTAVANA') {
            sendNotification($hold->{borrowernumber}, $hold->{branchcode}, $hold->{biblionumber}, $hold->{itemnumber} );
        }
        if ( $hold->{status} eq 'VANHENTUNUT' || $hold->{status} eq 'NOUTAMATTA' ) {
            #Should a collection list be made for stray reservations in shelves?
        }
    }
}

sub convertKeys {
    my ($hold) = @_;

    my ($biblionumber, $itemnumber, $borrowernumber);

    if ($legacy_ils eq 'p') {
        $itemnumber = $itemnumberConversionTable->fetch(  $hold->{itemnumber}  ) if $hold->{itemnumber};
        my $status = $hold->{status};
        if (not($itemnumber) && ($status eq 'ILMOITETTU' || $status eq 'NOUDETTAVANA')) {
            warn "\nHold for legacy biblionumber ".$hold->{biblionumber}." and legacy borrowernumber ".$hold->{borrowernumber}." has no Item in Koha, even if the Hold status ('ILMOITETTU'||'NOUDETTAVANA') demands it\n";
            return();
        }
    }
    elsif ($legacy_ils eq 'o') {
        $itemnumber = $itemnumberConversionTable->fetch(  $hold->{itemnumber}  ) if $hold->{itemnumber};
        my $waiting = $hold->{waiting};
        if (not($itemnumber) && $waiting && $waiting eq 'W') {
            warn "\nHold for legacy biblionumber ".$hold->{biblionumber}." and legacy borrowernumber ".$hold->{borrowernumber}." has no Item in Koha, even if the Hold is waiting!\n";
            return();
        }
    }
    $borrowernumber = $borrowernumberConversionTable->fetch(  $hold->{borrowernumber}  );
    unless ($borrowernumber) {
        warn "\nHold for Barcode ".$hold->{barcode}." and Patron ".$hold->{borrowernumber}." has no Patron in Koha!\n";
        return();
    }

    $biblionumber = $biblionumberConversionTable->fetch(  $hold->{biblionumber}  );
    unless ($biblionumber) {
        warn "\nHold for Barcode ".$hold->{barcode}." and Patron ".$hold->{borrowernumber}." has no Biblio in Koha!\n";
        return();
    }

    $hold->{biblionumber}   = $biblionumber;
    $hold->{itemnumber}     = $itemnumber;
    $hold->{borrowernumber} = $borrowernumber;
}
